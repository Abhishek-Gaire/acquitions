name: Docker Build and Push

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: acquisitions

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=prod-{{date 'YYYYMMDD-HHmmss'}},enable={{is_default_branch}}
          labels: |
            oorg.opencontainers.image.title=Acquisitions API
            org.opencontainers.image.description=Node.js Express API for acquisitions management
            org.opencontainers.image.vendor=Acquisitions Team
            org.opencontainers.image.source={{url}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.created={{date 'iso8601'}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          target: production
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate build summary
        if: always()
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Published Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Parse and display tags
          TAGS="${{ steps.meta.outputs.tags }}"
          echo "#### Tags:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$TAGS" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Generate pull commands
          echo "#### Pull Commands:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          # Get the first tag (usually the main one)
          MAIN_TAG=$(echo "$TAGS" | head -n1)
          echo "# Pull latest production image:" >> $GITHUB_STEP_SUMMARY
          echo "docker pull $MAIN_TAG" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Run the container:" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 3000:3000 $MAIN_TAG" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image ID**: ${{ steps.build.outputs.imageid }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Hit**: ${{ steps.build.outputs.cache-hit == 'true' && '✅ Yes' || '❌ No' }}" >> $GITHUB_STEP_SUMMARY

          # Add security note
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔒 Security Notes" >> $GITHUB_STEP_SUMMARY
          echo "- Image built with multi-stage Dockerfile for minimal attack surface" >> $GITHUB_STEP_SUMMARY
          echo "- Running as non-root user (nodejs:1001)" >> $GITHUB_STEP_SUMMARY
          echo "- Production dependencies only" >> $GITHUB_STEP_SUMMARY
          echo "- Alpine-based for reduced vulnerabilities" >> $GITHUB_STEP_SUMMARY

      - name: Update deployment status
        if: success()
        run: |
          echo "::notice title=Deployment Ready::Docker image successfully built and pushed to Docker Hub"
          echo "::notice title=Next Steps::Image is ready for deployment to production environment"

      - name: Build failure notification
        if: failure()
        run: |
          echo "::error::Docker build failed! Please check the build logs above."
          echo "::notice title=Common Issues::1. Check Dockerfile syntax and build context"
          echo "::notice title=Common Issues::2. Verify Docker Hub credentials are correctly set"
          echo "::notice title=Common Issues::3. Ensure all dependencies can be installed in container"
          echo "::notice title=Common Issues::4. Check if base images are accessible"
