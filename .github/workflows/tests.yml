name: Tests

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          NODE_OPTIONS: --experimental-vm-modules
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL || 'postgresql://test:test@localhost:5432/test_db' }}
        id: tests

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30

      - name: Generate test summary
        if: always()
        run: |
          if [ -f coverage/lcov.info ]; then
            # Extract coverage percentage if available
            COVERAGE=$(grep -oP 'Functions.*?:\s*\K\d+\.\d+' coverage/lcov-report/index.html 2>/dev/null || echo "N/A")
            echo "## Test Results 📊" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Coverage Report" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ✅ Coverage report generated" >> $GITHUB_STEP_SUMMARY
            echo "- **Coverage**: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Report**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Coverage Details" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            if [ -f coverage/coverage-summary.json ]; then
              cat coverage/coverage-summary.json | jq -r '.total | "Lines: " + (.lines.pct|tostring) + "%, Functions: " + (.functions.pct|tostring) + "%, Branches: " + (.branches.pct|tostring) + "%, Statements: " + (.statements.pct|tostring) + "%"' >> $GITHUB_STEP_SUMMARY || echo "Coverage details not available" >> $GITHUB_STEP_SUMMARY
            else
              echo "Coverage summary not available" >> $GITHUB_STEP_SUMMARY
            fi
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Test Results ❌" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: No coverage report found" >> $GITHUB_STEP_SUMMARY
            echo "- **Note**: Tests may have failed or coverage collection is disabled" >> $GITHUB_STEP_SUMMARY
          fi

          # Add test results if Jest output is available
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Run Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js Version**: $(node --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: test" >> $GITHUB_STEP_SUMMARY
          echo "- **Experimental VM Modules**: enabled" >> $GITHUB_STEP_SUMMARY

      - name: Annotate test failures
        if: failure() && steps.tests.outcome == 'failure'
        run: |
          echo "::error::Tests failed! Please check the test output above for details."
          echo "::notice title=Debugging Tips::1. Check if all dependencies are properly installed"
          echo "::notice title=Debugging Tips::2. Verify that environment variables are correctly set"
          echo "::notice title=Debugging Tips::3. Run 'npm test' locally to debug failing tests"
          echo "::notice title=Debugging Tips::4. Check that the test database is accessible if needed"

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              // Check if coverage summary exists
              const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');
              if (fs.existsSync(coveragePath)) {
                const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
                const total = coverage.total;
                
                const coverageComment = `## 📊 Coverage Report
                
                | Metric | Coverage | Threshold |
                |--------|----------|-----------|
                | **Lines** | ${total.lines.pct}% | - |
                | **Functions** | ${total.functions.pct}% | - |
                | **Branches** | ${total.branches.pct}% | - |
                | **Statements** | ${total.statements.pct}% | - |
                
                *Coverage report generated by Jest*`;

                // Find existing coverage comment
                const { data: comments } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                });

                const botComment = comments.find(comment => 
                  comment.user.login === 'github-actions[bot]' && 
                  comment.body.includes('📊 Coverage Report')
                );

                if (botComment) {
                  // Update existing comment
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                    body: coverageComment
                  });
                } else {
                  // Create new comment
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: coverageComment
                  });
                }
              }
            } catch (error) {
              console.log('No coverage report found or error processing coverage:', error.message);
            }
